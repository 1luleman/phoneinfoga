// Code generated by mockery v2.38.0. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	suppliers "github.com/sundowndev/phoneinfoga/v2/lib/remote/suppliers"
)

// NumverifySupplier is an autogenerated mock type for the NumverifySupplierInterface type
type NumverifySupplier struct {
	mock.Mock
}

// IsAvailable provides a mock function with given fields:
func (_m *NumverifySupplier) IsAvailable() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for IsAvailable")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Validate provides a mock function with given fields: _a0, _a1
func (_m *NumverifySupplier) Validate(_a0 string, _a1 string) (*suppliers.NumverifyValidateResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Validate")
	}

	var r0 *suppliers.NumverifyValidateResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (*suppliers.NumverifyValidateResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(string, string) *suppliers.NumverifyValidateResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*suppliers.NumverifyValidateResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewNumverifySupplier creates a new instance of NumverifySupplier. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewNumverifySupplier(t interface {
	mock.TestingT
	Cleanup(func())
}) *NumverifySupplier {
	mock := &NumverifySupplier{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
